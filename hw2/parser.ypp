%{
	#include "output.hpp"
	#include <iostream>
	#include <stdlib.h>

	using namespace std;

	extern int yylex();
	extern char* yytext;
	extern int yylineno;
	int yyerror(const char * message);
%}

%nonassoc VOID;
%nonassoc INT;
%nonassoc BYTE;
%nonassoc B;
%nonassoc BOOL;
%nonassoc TRUE;
%nonassoc FALSE;
%nonassoc RETURN;
%nonassoc WHILE;
%nonassoc BREAK;
%nonassoc CONTINUE;
%nonassoc SC;
%nonassoc COMMENT;
%nonassoc ID;
%nonassoc NUM;
%nonassoc STRING;
%right ASSIGN;
%left OR;
%left AND;
%left RELOP
%left BINOP
%right NOT
%nonassoc IF;
%nonassoc ELSE;
%left LPAREN RPAREN LBRACE RBRACE


%%

Program : Statements {output::printProductionRule(1);};

Statements : Statement {output::printProductionRule(2);};
| Statements Statement {output::printProductionRule(3);};

Statement: OpenStatement
| ClosedStatement

OpenStatement : IF LPAREN Exp RPAREN Statement {output::printProductionRule(10);};
| IF LPAREN Exp RPAREN ClosedStatement ELSE OpenStatement {output::printProductionRule(11);};
| WHILE LPAREN Exp RPAREN OpenStatement {output::printProductionRule(12);};

ClosedStatement : SimpleStatement
| IF LPAREN Exp RPAREN ClosedStatement ELSE ClosedStatement {output::printProductionRule(11);};
| WHILE LPAREN Exp RPAREN ClosedStatement {output::printProductionRule(12);};


SimpleStatement : LBRACE Statements RBRACE {output::printProductionRule(4);};
| Type ID SC {output::printProductionRule(5);};
| Type ID ASSIGN Exp SC {output::printProductionRule(6);};
| ID ASSIGN Exp SC {output::printProductionRule(7);};
| Call SC {output::printProductionRule(8);};
| RETURN SC {output::printProductionRule(9);};
| BREAK SC {output::printProductionRule(13);};
| CONTINUE SC {output::printProductionRule(14);};

Call : ID LPAREN Exp RPAREN {output::printProductionRule(15);};

Type : INT {output::printProductionRule(16);};
| BYTE {output::printProductionRule(17);};
| BOOL {output::printProductionRule(18);};

Exp : LPAREN Exp RPAREN {output::printProductionRule(19);};
| Exp BINOP Exp {output::printProductionRule(20);};
| ID {output::printProductionRule(21);};
| Call {output::printProductionRule(22);};
| NUM {output::printProductionRule(23);};
| NUM B {output::printProductionRule(24);};
| STRING {output::printProductionRule(25);};
| TRUE {output::printProductionRule(26);};
| FALSE {output::printProductionRule(27);};
| NOT Exp {output::printProductionRule(28);};
| Exp AND Exp {output::printProductionRule(29);};
| Exp OR Exp {output::printProductionRule(30);};
| Exp RELOP Exp {output::printProductionRule(31);};
| LPAREN Type RPAREN Exp {output::printProductionRule(32);};




%%

int main()
{
	yyparse();
}

int yyerror(const char * message)
{
	output::errorSyn(yylineno);
	//cout<<"Parse error: "<<message<<endl;
	exit(0);
}
