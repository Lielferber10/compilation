%{
	#include "hw3_output.hpp"
	#include "Node.hpp"
	#include "symbol_table.hpp"
	#include <iostream>
	#include <stdlib.h>


	using namespace std;
	using namespace output;

	extern int yylex();
	extern char* yytext;
	extern int yylineno;
	int yyerror(const char * message);
	Symbol_Table sym = Symbol_Table();
	int nested_whiles = 0;
%}

%define parse.lac full

%nonassoc INT;
%nonassoc BYTE;
%nonassoc B;
%nonassoc BOOL;
%nonassoc TRUE;
%nonassoc FALSE;
%nonassoc RETURN;
%nonassoc WHILE;
%nonassoc BREAK;
%nonassoc CONTINUE;
%nonassoc SC;
%nonassoc COMMENT;
%nonassoc ID;
%nonassoc NUM;
%nonassoc STRING;
%right ASSIGN;
%left OR;
%left AND;
%left LRELOP;
%left HRELOP;
%left PLUS MINUS;
%left MULT DEV;
%right NOT;
%left LPAREN RPAREN LBRACE RBRACE
%right IF;
%right ELSE;

%%

Program : Statements 
{sym.close_table();};


Statements : Statement 
{};

| Statements Statement 
{};


Statement : LBRACE NT Statements RBRACE 						{$$=$3; sym.close_table();};

| Type ID SC 
{
	$$ = new Node(yylineno, std::move($2->text), $1->type);
	sym.insert_node($$);
};

| Type ID ASSIGN Exp SC	
{
	Entry *entry=sym.find_entry($2->text);
	if(entry != nullptr)
	{
		errorDef(yylineno, $2->text);
		exit(0);
	}
	$2->type = $1->type;
	$$ = new Exp($1,$2,$4,yylineno); sym.insert_node($$);
};

| ID ASSIGN Exp SC 
{
	Entry *entry=sym.find_entry($1->text);
	if(entry==nullptr || entry->is_func)
	{
		errorUndef(yylineno,$1->text);
		exit(0);
	}
	$1 = new Node(yylineno, entry->id, entry->ret_type);
	if($1->type == $3->type || ($1->type == TINT && $3->type == TBYTE))
	{
		$$=new Exp(entry->ret_type,$1,$3,yylineno);
	}
	else
	{
		errorMismatch(yylineno);
		exit(0);
	}
	
};

| Call SC
{$$=$1;};

| RETURN SC 												
{};

| IF NT LPAREN Exp CB RPAREN Statement 
{sym.close_table();};

| IF NT LPAREN Exp CB RPAREN Statement ELSE {sym.close_table();} NT Statement 
{sym.close_table();};

| WHILE NT LPAREN Exp 	
{
	if($4->type != TBOOL)
	{
		errorMismatch(yylineno);
		exit(0);
	}
	nested_whiles++;

} RPAREN Statement {sym.close_table(); nested_whiles--;};

| BREAK SC 
{
	if(nested_whiles == 0)
	{
		errorUnexpectedBreak(yylineno);
		exit(0);
	}
};

| CONTINUE SC 
{
	if(nested_whiles == 0)
	{
		errorUnexpectedContinue(yylineno);
		exit(0);
	}
};

Call : ID LPAREN Exp RPAREN 
{
	Entry *entry = sym.find_entry($1->text);
	if(entry==nullptr || !entry->is_func)
	{
		errorUndefFunc(yylineno,$1->text);
		exit(0);
	}
	$1 = new Node(yylineno, entry->id, entry->ret_type);
	if($3->type == entry->func_types.at(0) || $3->type == TBYTE && (entry->id == "printi" || entry->id == "readi"))
	{
		$$ = new Node(yylineno, "", entry->ret_type);
	}
	else
	{
		errorPrototypeMismatch(yylineno, entry->id, type_to_string(entry->func_types.at(0)));
		exit(0);
	}
};

Type : INT 	
{$$ = $1;};

| BYTE 
{$$ = $1;};

| BOOL 
{$$ = $1;};


Exp : LPAREN Exp RPAREN 									{$$=$2;};

| Exp PLUS Exp 												{$$=new Add($1,$3);};

| Exp MINUS Exp 											{$$=new Sub($1,$3);};

| Exp MULT Exp 												{$$=new Mul($1,$3);};

| Exp DEV Exp 												{$$=new Dev($1,$3);};

| ID 
{
	Entry* entry = sym.find_entry($1->text);
	if(entry == nullptr || entry->is_func)
	{
		errorUndef(yylineno,$1->text);
		exit(0);
	}
	$$ = new Node(yylineno, entry->id, entry->ret_type);
};

| Call 														{$$=$1;};

| NUM 														{$$=$1;};

| NUM B 
{
	const char* c = $1->text.c_str();
	if (atoi(c)>255)
	{
		errorByteTooLarge(yylineno,$1->text);
		exit(0);
	}
	$$=new Byte(yylineno,$1->text);
};

| STRING												 	{$$=$1;};

| TRUE 														{$$=$1;};

| FALSE 													{$$=$1;};

| NOT Exp 
{
	if ($2->type!=TBOOL)
	{
		errorMismatch(yylineno);
		exit(0);
	}
	$$=new Bool(yylineno,"");
};

| Exp AND Exp
{
	if($1->type!=TBOOL || $3->type != TBOOL)
	{
		errorMismatch(yylineno);
		exit(0);
	}
	$$=new Bool(yylineno,"");
};

| Exp OR Exp
{
	if($1->type!=TBOOL || $3->type != TBOOL)
	{
		errorMismatch(yylineno);
		exit(0);
	}
	$$=new Bool(yylineno,"");
};

| Exp HRELOP Exp 
{
	if(!$1->is_num()||!$3->is_num())
	{
		errorMismatch(yylineno);
		exit(0);
	}
	$$=new Bool(yylineno,"");
};

| Exp LRELOP Exp
{
	if(!$1->is_num()||!$3->is_num())
	{
		errorMismatch(yylineno);
		exit(0);
	}
	$$=new Bool(yylineno,"");
};

| LPAREN Type RPAREN Exp 									{$$=new Exp($2,$4, yylineno);};    //cast

NT : 
{sym.open_table();} //NT-new table

CB : 
{
	if($0->type != TBOOL)
	{
		errorMismatch(yylineno);
		exit(0);
	}
} //CB-check bool


%%

int main()
{
	yyparse();
}

int yyerror(const char * message)
{
	errorSyn(yylineno);
	exit(0);
}
