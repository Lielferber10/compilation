%{
	#include "hw3_output.hpp"
	#include "Node.hpp"
	#include "symbol_table.hpp"
	#include "bp.hpp"
	#include "utilities.hpp"
	#include <iostream>
	#include <stdlib.h>


	using namespace std;
	using namespace output;

	extern int yylex();
	extern char* yytext;
	extern int yylineno;
	int yyerror(const char * message);
	Symbol_Table sym = Symbol_Table();
	CodeBuffer& codeBuffer = CodeBuffer::instance();
	Var vars = Var();
	int nested_whiles = 0;
	vector<string> whilesHeaders;
	vector<string> whilesNexts;
%}

%define parse.lac full

%nonassoc INT;
%nonassoc BYTE;
%nonassoc B;
%nonassoc BOOL;
%nonassoc TRUE;
%nonassoc FALSE;
%nonassoc RETURN;
%nonassoc WHILE;
%nonassoc BREAK;
%nonassoc CONTINUE;
%nonassoc SC;
%nonassoc COMMENT;
%nonassoc ID;
%nonassoc NUM;
%nonassoc STRING;
%right ASSIGN;
%left OR;
%left AND;
%left LRELOP;
%left HRELOP;
%left PLUS MINUS;
%left MULT DEV;
%right NOT;
%left LPAREN RPAREN LBRACE RBRACE
%right IF;
%right ELSE;

%%

Program : 
{
	init_llvm();

} Statements 
{
	codeBuffer.emit("ret i32 0");
	codeBuffer.emit("}");
	sym.close_table();
};


Statements : Statement 
{};

| Statements Statement 
{};


Statement : LBRACE NT Statements RBRACE 						{$$=$3; sym.close_table();};

| Type ID SC 
{
	$$ = new Node(yylineno, std::move($2->text), $1->type);
	sym.insert_node($$);
	if($1->type == TINT || $1->type == TBYTE)
	{
		$$->var = "0";
	}
	else if($1->type == TBOOL)
	{
		$$->var = "false";
	}
};

| Type ID ASSIGN Exp SC	
{
	Entry *entry=sym.find_entry($2->text);
	if(entry != nullptr)
	{
		errorDef(yylineno, $2->text);
		exit(0);
	}
	$2->type = $1->type;
	$$ = new Exp($1,$2,$4,yylineno); sym.insert_node($$);

	$$->var = $4->var;
	codeBuffer.emit("%address = getelementptr [50 x i32], [50 x i32]* %stack, i32 0, i32 " + std::to_string(entry->offset));
	if($$->type == TBOOL)
	{
		codeBuffer.emit("%value = zext i1 " + $$->var + " to i32");
		codeBuffer.emit("store i32 %value, i32* %address");
	}
	else if($$->type == TBYTE)
	{
		codeBuffer.emit("%value = zext i8 " + $$->var + " to i32");
		codeBuffer.emit("store i32 %value, i32* %address");
	}
	else if($$->type == TINT)
	{
		codeBuffer.emit("store i32 " + $$->var + ", i32* %address");
	}
};

| ID ASSIGN Exp SC 
{
	Entry *entry=sym.find_entry($1->text);
	if(entry==nullptr || entry->is_func)
	{
		errorUndef(yylineno,$1->text);
		exit(0);
	}
	$1 = new Node(yylineno, entry->id, entry->ret_type);
	if($1->type == $3->type || ($1->type == TINT && $3->type == TBYTE))
	{
		$$=new Exp(entry->ret_type,$1,$3,yylineno);
		codeBuffer.emit("%address = getelementptr [50 x i32], [50 x i32]* %stack, i32 0, i32 " + std::to_string(entry->offset));
		if($$->type == TBOOL)
		{
			codeBuffer.emit("%value = zext i1 " + $$->var + " to i32");
			codeBuffer.emit("store i32 %value, i32* %address");
		}
		else if($$->type == TBYTE)
		{
			codeBuffer.emit("%value = zext i8 " + $$->var + " to i32");
			codeBuffer.emit("store i32 %value, i32* %address");
		}
		else if($$->type == TINT)
		{
			codeBuffer.emit("store i32 " + $$->var + ", i32* %address");
		}
	}
	else
	{
		errorMismatch(yylineno);
		exit(0);
	}
	
};

| Call SC
{$$=$1;};

| RETURN SC 												
{codeBuffer.emit("ret i32 0");};

| IF NT LPAREN CB RPAREN Statement 
{
	$1->next_label = codeBuffer.freshLabel();
	codeBuffer.emit("br label %" + $1->next_label);
    codeBuffer.emit($4->false_label + ":");
    codeBuffer.emit($1->next_label + ":");
	sym.close_table();
};

| IF NT LPAREN CB RPAREN Statement ELSE 
{
	$1->next_label = codeBuffer.freshLabel();
	codeBuffer.emit("br label %" + $1->next_label);
	codeBuffer.emit($4->false_label + ":");
    codeBuffer.emit($1->next_label + ":");
	sym.close_table();
} NT Statement
{
	$$->next_label = codeBuffer.freshLabel();
	codeBuffer.emit("br label %" + $$->next_label);
    codeBuffer.emit($$->next_label + ":");
	sym.close_table();
};

| WHILE NT LPAREN
{
	string header = vars.freshLabel();
	whilesHeaders.push_back(header);
	codeBuffer.emit(header + ":");
} 
Exp 	
{
	if($4->type != TBOOL)
	{
		errorMismatch(yylineno);
		exit(0);
	}
	nested_whiles++;
	$$->next_label = vars.freshLabel();
	whilesNexts.push_back($$->next_label);

} RPAREN {codeBuffer.emit($4->true_label + ":");} Statement
{
	whilesHeaders.pop_back();
	$4->false_label = whilesNexts.back();
	whilesNexts.pop_back();
	codeBuffer.emit("br i1 " + $4->var + ", label " + $4->true_label + ", label " + $$->next_label);
	codeBuffer.emit($$->next_label + ":");
	sym.close_table();
	nested_whiles--;
};

| BREAK SC 
{
	if(nested_whiles == 0)
	{
		errorUnexpectedBreak(yylineno);
		exit(0);
	}
	string next_label = whilesNexts.back();
	whilesNexts.pop_back();
	codeBuffer.emit("br label " + next_label);
};

| CONTINUE SC 
{
	if(nested_whiles == 0)
	{
		errorUnexpectedContinue(yylineno);
		exit(0);
	}
	string next_label = whilesHeaders.back();
	whilesHeaders.pop_back();
	codeBuffer.emit("br label " + next_label);
};

Call : ID LPAREN Exp RPAREN 
{
	Entry *entry = sym.find_entry($1->text);
	if(entry==nullptr || !entry->is_func)
	{
		errorUndefFunc(yylineno,$1->text);
		exit(0);
	}
	$1 = new Node(yylineno, entry->id, entry->ret_type);
	if($3->type == entry->func_types.at(0) || $3->type == TBYTE && (entry->id == "printi" || entry->id == "readi"))
	{
		$$ = new Node(yylineno, "", entry->ret_type);
		if(entry->id == "printi")
		{
			if($3->type == TBYTE)
			{
				string value = vars.freshVar();
				codeBuffer.emit(value + " = zext i8 " + $3->var + " to i32");
				codeBuffer.emit("call void @printi(i32 " + value + ")");
			}
			else if($3->type == TINT)
			{
				codeBuffer.emit("call void @printi(i32 " + $3->var + ")");
			}
		}
		else if(entry->id == "readi")
		{
			$$->var = vars.freshVar();
			if($3->type == TBYTE)
			{
				string value = vars.freshVar();
				codeBuffer.emit(value + " = zext i8 " + $3->var + " to i32");
				codeBuffer.emit($$->var + " = call void @readi(i32 " + value + ")");
			}
			else if($3->type == TINT)
			{
				codeBuffer.emit($$->var + " = call void @printi(i32 " + $3->var + ")");
			}
		}
		else if(entry->id == "print")
		{	
			codeBuffer.emit($$->var + " = call void @print(i8* " + $3->var + ")");
		}
	}
	else
	{
		errorPrototypeMismatch(yylineno, entry->id, type_to_string(entry->func_types.at(0)));
		exit(0);
	}
};

Type : INT 	
{$$ = $1;};

| BYTE 
{$$ = $1;};

| BOOL 
{$$ = $1;};


Exp : LPAREN Exp RPAREN 									{$$=$2;};

| Exp PLUS Exp 												
{
	$$=new Add($1,$3);
	$$->var = vars.freshVar();
	if($1->type == TINT && $3->type == TINT)
	{
		codeBuffer.emit($$->var + " = add i32 " + $1->var + ", i32 " + $3->var);
	}
	else if($1->type == TBYTE && $3->type == TBYTE)
	{
		string value1 = vars.freshVar();
		string value2 = vars.freshVar();
		codeBuffer.emit(value1 + " = zext i8 " + $1->var + " to i32");
		codeBuffer.emit(value2 + " = zext i8 " + $3->var + " to i32");
		codeBuffer.emit($$->var + " = add i32 " + value1 + ", i32 " + value2);
		if($$->type == TBYTE)
		{
			codeBuffer.emit($$->var + " = trunc i32 " + $$->var + " to i8");
		}
	}
	else if($1->type == TBYTE && $3->type == TINT)
	{
		string value1 = vars.freshVar();
		codeBuffer.emit(value1 + " = zext i8 " + $1->var + " to i32");
		codeBuffer.emit($$->var + " = add i32 " + value1 + ", i32 " + $3->var);
		if($$->type == TBYTE)
		{
			codeBuffer.emit($$->var + " = trunc i32 " + $$->var + " to i8");
		}
	}
	else if($1->type == TINT && $3->type == TBYTE)
	{
		string value2 = vars.freshVar();
		codeBuffer.emit(value2 + " = zext i8 " + $3->var + " to i32");
		codeBuffer.emit($$->var + " = add i32 " + $1->var + ", i32 " + value2);
		if($$->type == TBYTE)
		{
			codeBuffer.emit($$->var + " = trunc i32 " + $$->var + " to i8");
		}
	}
	
};

| Exp MINUS Exp 											
{
	$$=new Sub($1,$3);
	$$->var = vars.freshVar();
	if($1->type == TINT && $3->type == TINT)
	{
		codeBuffer.emit($$->var + " = sub i32 " + $1->var + ", i32 " + $3->var);
	}
	else if($1->type == TBYTE && $3->type == TBYTE)
	{
		string value1 = vars.freshVar();
		string value2 = vars.freshVar();
		codeBuffer.emit(value1 + " = zext i8 " + $1->var + " to i32");
		codeBuffer.emit(value2 + " = zext i8 " + $3->var + " to i32");
		codeBuffer.emit($$->var + " = sub i32 " + value1 + ", i32 " + value2);
		if($$->type == TBYTE)
		{
			codeBuffer.emit($$->var + " = trunc i32 " + $$->var + " to i8");
		}
	}
	else if($1->type == TBYTE && $3->type == TINT)
	{
		string value1 = vars.freshVar();
		codeBuffer.emit(value1 + " = zext i8 " + $1->var + " to i32");
		codeBuffer.emit($$->var + " = sub i32 " + value1 + ", i32 " + $3->var);
		if($$->type == TBYTE)
		{
			codeBuffer.emit($$->var + " = trunc i32 " + $$->var + " to i8");
		}
	}
	else if($1->type == TINT && $3->type == TBYTE)
	{
		string value2 = vars.freshVar();
		codeBuffer.emit(value2 + " = zext i8 " + $3->var + " to i32");
		codeBuffer.emit($$->var + " = sub i32 " + $1->var + ", i32 " + value2);
		if($$->type == TBYTE)
		{
			codeBuffer.emit($$->var + " = trunc i32 " + $$->var + " to i8");
		}
	}
};

| Exp MULT Exp 												
{
	$$=new Mul($1,$3);
	$$->var = vars.freshVar();
	if($1->type == TINT && $3->type == TINT)
	{
		codeBuffer.emit($$->var + " = mul i32 " + $1->var + ", i32 " + $3->var);
	}
	else if($1->type == TBYTE && $3->type == TBYTE)
	{
		string value1 = vars.freshVar();
		string value2 = vars.freshVar();
		codeBuffer.emit(value1 + " = zext i8 " + $1->var + " to i32");
		codeBuffer.emit(value2 + " = zext i8 " + $3->var + " to i32");
		codeBuffer.emit($$->var + " = mul i32 " + value1 + ", i32 " + value2);
		if($$->type == TBYTE)
		{
			codeBuffer.emit($$->var + " = trunc i32 " + $$->var + " to i8");
		}
	}
	else if($1->type == TBYTE && $3->type == TINT)
	{
		string value1 = vars.freshVar();
		codeBuffer.emit(value1 + " = zext i8 " + $1->var + " to i32");
		codeBuffer.emit($$->var + " = mul i32 " + value1 + ", i32 " + $3->var);
		if($$->type == TBYTE)
		{
			codeBuffer.emit($$->var + " = trunc i32 " + $$->var + " to i8");
		}
	}
	else if($1->type == TINT && $3->type == TBYTE)
	{
		string value2 = vars.freshVar();
		codeBuffer.emit(value2 + " = zext i8 " + $3->var + " to i32");
		codeBuffer.emit($$->var + " = mul i32 " + $1->var + ", i32 " + value2);
		if($$->type == TBYTE)
		{
			codeBuffer.emit($$->var + " = trunc i32 " + $$->var + " to i8");
		}
	}
};

| Exp DEV Exp 												
{
	$$=new Dev($1,$3);
	if($3->var == "0")
	{
		codeBuffer.emit("call void @print(i8* \"Error division by zero\")");
		exit(0);
	}

	$$->var = vars.freshVar();
	if($1->type == TINT && $3->type == TINT)
	{
		codeBuffer.emit($$->var + " = sdiv i32 " + $1->var + ", i32 " + $3->var);
	}
	else if($1->type == TBYTE && $3->type == TBYTE)
	{
		string value1 = vars.freshVar();
		string value2 = vars.freshVar();
		codeBuffer.emit(value1 + " = zext i8 " + $1->var + " to i32");
		codeBuffer.emit(value2 + " = zext i8 " + $3->var + " to i32");
		codeBuffer.emit($$->var + " = sdiv i32 " + value1 + ", i32 " + value2);
		if($$->type == TBYTE)
		{
			codeBuffer.emit($$->var + " = trunc i32 " + $$->var + " to i8");
		}
	}
	else if($1->type == TBYTE && $3->type == TINT)
	{
		string value1 = vars.freshVar();
		codeBuffer.emit(value1 + " = zext i8 " + $1->var + " to i32");
		codeBuffer.emit($$->var + " = sdiv i32 " + value1 + ", i32 " + $3->var);
		if($$->type == TBYTE)
		{
			codeBuffer.emit($$->var + " = trunc i32 " + $$->var + " to i8");
		}
	}
	else if($1->type == TINT && $3->type == TBYTE)
	{
		string value2 = vars.freshVar();
		codeBuffer.emit(value2 + " = zext i8 " + $3->var + " to i32");
		codeBuffer.emit($$->var + " = sdiv i32 " + $1->var + ", i32 " + value2);
		if($$->type == TBYTE)
		{
			codeBuffer.emit($$->var + " = trunc i32 " + $$->var + " to i8");
		}
	}
};

| ID 
{
	Entry* entry = sym.find_entry($1->text);
	if(entry == nullptr || entry->is_func)
	{
		errorUndef(yylineno,$1->text);
		exit(0);
	}
	$$ = new Node(yylineno, entry->id, entry->ret_type);
	$$->var = vars.freshVar();
	codeBuffer.emit($$->var + " = load i32, i32* getelementptr [50 x i32], [50 x i32]* %stack, i32 0, i32 " + std::to_string(entry->offset));
};

| Call 														{$$=$1;};

| NUM 														{$$=$1; $$->var = $1->text;};

| NUM B 
{
	const char* c = $1->text.c_str();
	if (atoi(c)>255)
	{
		errorByteTooLarge(yylineno,$1->text);
		exit(0);
	}
	$$=new Byte(yylineno,$1->text);
	$$->var = $1->text;
};

| STRING												 	
{
	string var = vars.freshStringVar();
	int len = $1->text.length() + 1;
	$$=$1;
	$$->var = "@." + var;
	codeBuffer.emitGlobal($$->var + " = internal constant [" + std::to_string(len) + " x i8] c\"" + $1->text + "\\00\"");
};

| TRUE 														{$$=$1; $$->var = $1->text;};

| FALSE 													{$$=$1; $$->var = $1->text;};

| NOT Exp 
{
	if ($2->type!=TBOOL)
	{
		errorMismatch(yylineno);
		exit(0);
	}
	$$=new Bool(yylineno,"");

	$$->false_label = vars.freshLabel();
	$$->true_label = vars.freshLabel();
	codeBuffer.emit("br i1 " + $1->var + ", label " + $$->false_label + ", label " + $$->true_label);
};

| Exp AND {codeBuffer.emit(($1)->true_label + ":");} Exp
{
	if($1->type!=TBOOL || $3->type != TBOOL)
	{
		errorMismatch(yylineno);
		exit(0);
	}
	$$=new Bool(yylineno,"");

	$1->false_label = vars.freshLabel();
	$1->true_label = vars.freshLabel();
	$$->false_label = vars.freshLabel();
	$$->true_label = vars.freshLabel();
	codeBuffer.emit("br i1 " + $1->var + ", label " + $1->true_label + ", label " + $$->false_label);
	codeBuffer.emit($1->true_label + ":");
	codeBuffer.emit("br i1 " + $3->var + ", label " + $$->true_label + ", label " + $$->false_label);


};

| Exp OR {codeBuffer.emit(($1)->false_label + ":");} Exp
{
	if($1->type!=TBOOL || $3->type != TBOOL)
	{
		errorMismatch(yylineno);
		exit(0);
	}
	$$=new Bool(yylineno,"");

	$1->false_label = vars.freshLabel();
	$$->false_label = vars.freshLabel();
	$$->true_label = vars.freshLabel();
	codeBuffer.emit("br i1 " + $1->var + ", label " + $$->true_label + ", label " + $1->false_label);
	codeBuffer.emit($1->false_label + ":");
	codeBuffer.emit("br i1 " + $3->var + ", label " + $$->true_label + ", label " + $$->false_label);

};

| Exp HRELOP Exp 
{
	if(!$1->is_num()||!$3->is_num())
	{
		errorMismatch(yylineno);
		exit(0);
	}
	$$=new Bool(yylineno,"");
	$$->var = vars.freshVar();

	string op;
	if($2->text == "<")
	{
		op = "sgt";
	}
	else if($2->text == "<=")
	{
		op = "sge";
	}
	else if($2->text == ">=")
	{
		op = "sle";
	}
	else if($2->text == ">")
	{
		op = "slt";
	}

	$$->false_label = vars.freshLabel();
	$$->true_label = vars.freshLabel();
	if($1->type == TINT && $3->type == TINT)
	{
		codeBuffer.emit($$->var + " = icmp " + op + "i32 " + $1->var + ", " + $3->var);
	}
	else if($1->type == TBYTE && $3->type == TBYTE)
	{
		string value1 = vars.freshVar();
		string value2 = vars.freshVar();
		codeBuffer.emit(value1 + " = zext i8 " + $1->var + " to i32");
		codeBuffer.emit(value2 + " = zext i8 " + $3->var + " to i32");
		codeBuffer.emit($$->var + " = icmp " + op + "i32 " + value1 + ", " + value2);
	}
	else if($1->type == TBYTE && $3->type == TINT)
	{
		string value1 = vars.freshVar();
		codeBuffer.emit(value1 + " = zext i8 " + $1->var + " to i32");
		codeBuffer.emit($$->var + " = icmp " + op + "i32 " + value1 + ", " + $3->var);
	}
	else if($1->type == TINT && $3->type == TBYTE)
	{
		string value2 = vars.freshVar();
		codeBuffer.emit(value2 + " = zext i8 " + $3->var + " to i32");
		codeBuffer.emit($$->var + " = icmp " + op + "i32 " + $1->var + ", " + value2);
	}
	codeBuffer.emit("br i1 " + $$->var + ", label " + $$->true_label + ", label " + $$->false_label);
};

| Exp LRELOP Exp
{
	if(!$1->is_num()||!$3->is_num())
	{
		errorMismatch(yylineno);
		exit(0);
	}
	$$=new Bool(yylineno,"");

	string op;
	if($2->text == "==")
	{
		op = "eq";
	}
	else if($2->text == "!=")
	{
		op = "ne";
	}

	$$->false_label = vars.freshLabel();
	$$->true_label = vars.freshLabel();
	if($1->type == TINT && $3->type == TINT)
	{
		codeBuffer.emit($$->var + " = icmp " + op + "i32 " + $1->var + ", " + $3->var);
	}
	else if($1->type == TBYTE && $3->type == TBYTE)
	{
		string value1 = vars.freshVar();
		string value2 = vars.freshVar();
		codeBuffer.emit(value1 + " = zext i8 " + $1->var + " to i32");
		codeBuffer.emit(value2 + " = zext i8 " + $3->var + " to i32");
		codeBuffer.emit($$->var + " = icmp " + op + "i32 " + value1 + ", " + value2);
	}
	else if($1->type == TBYTE && $3->type == TINT)
	{
		string value1 = vars.freshVar();
		codeBuffer.emit(value1 + " = zext i8 " + $1->var + " to i32");
		codeBuffer.emit($$->var + " = icmp " + op + "i32 " + value1 + ", " + $3->var);
	}
	else if($1->type == TINT && $3->type == TBYTE)
	{
		string value2 = vars.freshVar();
		codeBuffer.emit(value2 + " = zext i8 " + $3->var + " to i32");
		codeBuffer.emit($$->var + " = icmp " + op + "i32 " + $1->var + ", " + value2);
	}
	codeBuffer.emit("br i1 " + $$->var + ", label " + $$->true_label + ", label " + $$->false_label);
};

| LPAREN Type RPAREN Exp 									
{
	$$=new Exp($2,$4, yylineno);
	$$->var = $4->var;
	if($2->type == TINT && $4->type == TBYTE)
	{
		$$->var = vars.freshVar();
		codeBuffer.emit($$->var + " = zext i8 " + $4->var + " to i32");
	}

}; //cast

NT : 
{sym.open_table();} //NT-new table

CB : Exp
{
	if($1->type != TBOOL)
	{
		errorMismatch(yylineno);
		exit(0);
	}
	codeBuffer.emit($1->true_label + ":");
	$$ = $1;
} //CB-check bool


%%

int main()
{
	yyparse();
	codeBuffer.printGlobalBuffer();
    codeBuffer.printCodeBuffer();
}

int yyerror(const char * message)
{
	errorSyn(yylineno);
	exit(0);
}
